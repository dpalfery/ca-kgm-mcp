# Multi-stage production Dockerfile for KG Memory Server
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY index.ts ./

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S kgmemory && \
    adduser -S kgmemory -u 1001 -G kgmemory

# Set working directory
WORKDIR /app

# Copy built application and dependencies
COPY --from=builder --chown=kgmemory:kgmemory /app/dist ./dist
COPY --from=builder --chown=kgmemory:kgmemory /app/node_modules ./node_modules
COPY --from=builder --chown=kgmemory:kgmemory /app/package.json ./package.json

# Create data directory for SQLite database
RUN mkdir -p /app/data && chown kgmemory:kgmemory /app/data

# Set environment variables
ENV NODE_ENV=production
ENV DATABASE_PATH=/app/data/kg-memory.db
ENV LOG_LEVEL=info

# Switch to non-root user
USER kgmemory

# Expose port (if running as HTTP server)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "console.log('Health check passed')" || exit 1

# Start the application
CMD ["node", "dist/index.js"]

# Labels for metadata
LABEL org.opencontainers.image.title="KG Memory Server"
LABEL org.opencontainers.image.description="Knowledge Graph Memory MCP Server with rule-based context detection"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="Your Organization"
LABEL org.opencontainers.image.licenses="MIT"